реализовал (+),не реализовал(-), честично реализовал (+-)

+ Серверная часть приложения периодически опрашивает все заданные в конфигурации
приложения URL-ы, и отайот их статус в пользовательский интерфейс.

+ Основной пользовательский интерфейс приложения должен состоять из одной HTML страницы,
которая показывает статус всех URL-ов в виде таблицы.

+Таблица должна периодически перезагружаться с сервера,
чтобы отображать актуальный статус.

+Статус каждого URL-а может принимать три состояния: OK, WARNING, CRITICAL.

+Кроме статуса, в таблицу нужно выводить другие полезные детали о результатах мониторинга URL-ов,
чтобы было легче понять, в чем состоит проблема.  

- При статусах WARNING и CRITICAL, страница должна издавать звуковой сигнал
(разный для WARNING и CRITICAL)

Конфигурирация приложения
-------------------------
+   Конфигурация URL-ов, которые подлежат мониторингу приложением, должна задаваться в базе данных. 
    Для каждого URL-а, который будет мониториться приложением, задаются такие параметры:
+ * Период мониторинга
+ * Время ответа сервера (отдельные пороги для OK, WARNING, CRITICAL)
+ * Ожидаемый HTTP response code.
    Если сервер возвращает какой-то другой код, статус URL-а должен быть CRITICAL.
+ * Ожидаемый диапазон размера респонса в байтах (min и max).
    Если размер контента выходит за пределы допустимого диапазона, статус URL-а
    должен быть CRITICAL.
+*  Опционально - подстрока, которая должна содержаться в респонсе.
    Если подстроки нету, статус URL-а должен быть CRITICAL.

-Тесты

Уровни реализации:
==================

+ Клиент-серверное приложение с веб-интерфейсом, тестирующее несколько сайтов с сервера параллельно,
  и выводящее результат в браузер.

+  Результат мониторинга выдается в виде таблицы на HTML странице (через сервлет или jsp).

+  Временное выключение/включение мониторинга URL-а через веб-интерфейс.

+  Конфигурация мониторинга (добавление, настройка, удаление URL-ов мониторинга)
   задается через веб-интерфейс и сохраняется в базе данных.

+  Используйте любой web-application framework, и любую базу данных, с которыми Вы знакомы.


Я использовал среду разработки Intellij IDEA, Spring MVC, JSP для veiw, JPA/Hibernate для мапинга и работы с базой, 
MySql базу даных, Tomcat как локальний сервер, Maven для сборки(при попытке собрать war - ошибка почемуто, собрал jar).

Краткое описание:
	Пользователь добавляет Url, он сохраняется в базе и для него в пуле создаётся поток 
	в котором переодически идут запросы по даном url и делается анализ.
	Результати сохраняються в базе. Пользователь видит все добавленые url
	 и их статус  в таблице на главной странице, которою возвращает сервер.
	UrlCunfigAnaliseService - интерфейс которий отвечает за хранение, анализ url.
	Все запосы обрабатывает UrlController.





